---
import Modal from "./Modal.astro";
const title = "More Info";
const modal =
  "Fill in all of the boxes below to quickly see your work schedule for the number of days you decide. Make sure you start the scheduling on the first day of your work rotation! The data you type into the boxes below will be saved on your device's browser for 30 days so you will not be expetced to remember every detail.";
---

<main>
  <div class="container">
    <Modal title={title} content={modal} />

    <form id="scheduling">
      <label for="workDays">Work Days:</label>
      <input type="number" id="workDays" min="1" required />
      <label for="offDays">Off Days:</label>
      <input type="number" id="offDays" min="1" required />
      <label for="totalDays">Total Days:</label>
      <input type="number" id="totalDays" min="1" required />
      <label for="startDate">Start Date:</label>
      <input type="date" id="startDate" required />

      <button type="submit" id="generate">Show Schedule</button>
    </form>

    <div id="tableWrapper">
      <table border="1">
        <thead>
          <tr>
            <th>Week Day</th>
            <th>Date</th>
            <th>On/Off</th>
          </tr>
        </thead>
        <tbody id="scheduleTable">
          <!-- Schedule data will be inserted here using JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</main>
<script>
  interface ScheduleEntry {
    date: string;
    dayOfWeek: string;
    shift: string;
  }

  function formatDate(date: Date): string {
    const year = date.getUTCFullYear();
    const month = String(date.getUTCMonth() + 1).padStart(2, "0");
    const day = String(date.getUTCDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  }

  function getDayOfWeek(dayIndex: number): string {
    const days = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ];
    return days[dayIndex];
  }

  function generateRotatingSchedule(
    workDays: number,
    offDays: number,
    totalDays: number,
    startDate: Date,
  ): ScheduleEntry[] {
    const schedule: ScheduleEntry[] = [];
    let currentDate = new Date(startDate);
    let daysScheduled = 0;

    while (daysScheduled < totalDays) {
      const formattedDate = formatDate(currentDate);
      const dayOfWeek = getDayOfWeek(currentDate.getDay());
      const shift =
        daysScheduled % (workDays + offDays) < workDays ? "Work" : "Off";
      schedule.push({ date: formattedDate, dayOfWeek, shift });
      daysScheduled++;
      currentDate.setDate(currentDate.getDate() + 1);
    }
    return schedule;
  }

  function generateSchedule(e: Event): void {
    e.preventDefault();
    const workDays = parseInt(
      (document.getElementById("workDays") as HTMLInputElement).value,
      10,
    );
    const offDays = parseInt(
      (document.getElementById("offDays") as HTMLInputElement).value,
      10,
    );
    const totalDays = parseInt(
      (document.getElementById("totalDays") as HTMLInputElement).value,
      10,
    );
    const startDateInput = (
      document.getElementById("startDate") as HTMLInputElement
    ).value;
    const startDate = new Date(startDateInput);

    const rotatingSchedule = generateRotatingSchedule(
      workDays,
      offDays,
      totalDays,
      startDate,
    );
    renderTableView(rotatingSchedule);

    setCookie("workDays", workDays.toString(), 30);
    setCookie("offDays", offDays.toString(), 30);
    setCookie("totalDays", totalDays.toString(), 30);
    setCookie("startDate", startDateInput, 30);
  }

  function renderTableView(schedule: ScheduleEntry[]): void {
    const scheduleTable = document.getElementById(
      "scheduleTable",
    ) as HTMLTableElement;
    scheduleTable.innerHTML = "";
    schedule.forEach((entry) => {
      const row = document.createElement("tr");
      const dateCell = document.createElement("td");
      dateCell.textContent = entry.date;
      const dayOfWeekCell = document.createElement("td");
      dayOfWeekCell.textContent = entry.dayOfWeek;
      const shiftCell = document.createElement("td");
      shiftCell.textContent = entry.shift;
      row.appendChild(dayOfWeekCell);
      row.appendChild(dateCell);
      row.appendChild(shiftCell);
      scheduleTable.appendChild(row);
    });
  }

  function setCookie(name: string, value: string, daysToExpire: number): void {
    const date = new Date();
    date.setTime(date.getTime() + daysToExpire * 24 * 60 * 60 * 1000);
    const expires = "expires=" + date.toUTCString();
    document.cookie = name + "=" + value + ";" + expires + ";path=/";
  }

  function getCookie(name: string): string | null {
    const nameEQ = name + "=";
    const ca = document.cookie.split(";");
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === " ") c = c.substring(1);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length);
    }
    return null;
  }

  function prefillInputs(): void {
    (document.getElementById("workDays") as HTMLInputElement).value =
      getCookie("workDays") || "";
    (document.getElementById("offDays") as HTMLInputElement).value =
      getCookie("offDays") || "";
    (document.getElementById("totalDays") as HTMLInputElement).value =
      getCookie("totalDays") || "";
    (document.getElementById("startDate") as HTMLInputElement).value =
      getCookie("startDate") || "";
  }

  function initializeEventListeners() {
    const generateButton = document.getElementById("generate");
    if (generateButton) {
      generateButton.removeEventListener("click", generateSchedule);
      generateButton.addEventListener("click", generateSchedule);
    }
    prefillInputs();
  }

  initializeEventListeners();

  document.addEventListener("astro:after-swap", () => {
    initializeEventListeners();
  });
</script>
