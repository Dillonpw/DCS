---
import Modal from "./Modal.astro";
const title = "More Info";
const modal =
  "Search for your city or town, and see a few important weather aspects populate below. \nUse the Toggle to switch between Imperial and Metric measurements.";
---

<section class="container">
  <Modal title={title} content={modal} />

  <div id="box">
    <form id ='weatherForm' onsubmit=getLocation()>
      <label for="searchQuery"></label>
      <input
        type="text"
        id="searchQuery"
        name="searchQuery"
        required
        placeholder="Search"
      />
      <button id="weatherBtn" type="submit"> Go </button>
    </form>
    <div id="locationDiv">
      <div id="conditionDiv">
        <h2>Condition</h2>
        <h3 id="conditionData">- -</h3>
      </div>
      <div id="tempDiv">
        <h2>Temperature</h2>
        <h3 id="tempDataF">- -</h3>
        <h3 id="tempDataC">- -</h3>
      </div>
      <div id="humidityDiv">
        <h2>Humidity</h2>
        <h3 id="humidityData">- -</h3>
      </div>
      <div id="visDiv">
        <h2>Visibilty</h2>
        <h3 id="visDataF">- -</h3>
        <h3 id="visDataC">- -</h3>
      </div>
      <div id="windDiv">
        <h2>Wind Speed</h2>
        <h3 id="windDataUS">- -</h3>
        <h3 id="windDataEU">- -</h3>
      </div>
    </div>
  </div>
  <div class="toggleInfo">
    <p>Imperial</p>
    <label for="mode" class="switch">
      <input id="mode" type="checkbox" />
      <span class="slider round"></span>
    </label>
    <p>Metric</p>
  </div>
</section>
<script>
  const API_KEY: string = "f65307767e03462881b163921233009";

  const searchQueryElement: HTMLInputElement = document.getElementById(
    "searchQuery",
  ) as HTMLInputElement;
  const weatherData: HTMLElement = document.getElementById(
    "conditionData",
  ) as HTMLElement;
  const tempDataF: HTMLElement = document.getElementById(
    "tempDataF",
  ) as HTMLElement;
  const humidity: HTMLElement = document.getElementById(
    "humidityData",
  ) as HTMLElement;
  const tempDataC: HTMLElement = document.getElementById(
    "tempDataC",
  ) as HTMLElement;
  const visDataUS: HTMLElement = document.getElementById(
    "visDataF",
  ) as HTMLElement;
  const visDataEU: HTMLElement = document.getElementById(
    "visDataC",
  ) as HTMLElement;
  const windDataUS: HTMLElement = document.getElementById(
    "windDataUS",
  ) as HTMLElement;
  const windDataEU: HTMLElement = document.getElementById(
    "windDataEU",
  ) as HTMLElement;
  const weatherBtn: HTMLElement = document.getElementById(
    "weatherBtn",
  ) as HTMLElement;
  const modeCheckbox: HTMLInputElement = document.getElementById(
    "mode",
  ) as HTMLInputElement;




  tempDataC.style.display = "none";
  visDataEU.style.display = "none";
  windDataEU.style.display = "none";
  tempDataF.style.display = "block";
  visDataUS.style.display = "block;";
  windDataUS.style.display = "block";

  interface WeatherApiResponse {
    location: {
      name: string;
    };
    current: {
      condition: {
        text: string;
      };
      temp_f: number;
      temp_c: number;
      humidity: number;
      vis_miles: number;
      vis_km: number;
      wind_mph: number;
      wind_kph: number;
    };
  }

  async function getLocation(e: Event): Promise<void> {
    e.preventDefault();
  

    const response: Response = await fetch(
      `https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${searchQueryElement.value}&aqi=no`,
      { mode: "cors" },
    );
    const data: WeatherApiResponse = await response.json();

    weatherData.innerText = data.current.condition.text;
    tempDataF.innerText = `${data.current.temp_f}° F`;
    tempDataC.innerText = `${data.current.temp_c}° C`;
    humidity.innerText = `${data.current.humidity}`;
    visDataUS.innerText = `${data.current.vis_miles} Miles`;
    visDataEU.innerText = `${data.current.vis_km} KM`;

    windDataUS.innerText = `${data.current.wind_mph} MPH`;
    windDataEU.innerText = `${data.current.wind_kph} KPH`;
  }

  weatherBtn.addEventListener("click", getLocation);

  modeCheckbox.addEventListener("change", (event: Event) => {
    const isChecked: boolean = (event.target as HTMLInputElement).checked;
    tempDataF.style.display = isChecked ? "none" : "block";
    visDataUS.style.display = isChecked ? "none" : "block";
    windDataUS.style.display = isChecked ? "none" : "block";
    tempDataC.style.display = isChecked ? "block" : "none";
    visDataEU.style.display = isChecked ? "block" : "none";
    windDataEU.style.display = isChecked ? "block" : "none";
  });

  function initializeEventListeners() {
    const weatherForm = document.getElementById(
      "weatherForm",
    ) as HTMLFormElement | null;
    if (weatherForm) {
      weatherForm.removeEventListener("submit", getLocation as EventListener);
      weatherForm.addEventListener("submit", getLocation as EventListener);
    }
  
  }

  initializeEventListeners();

  document.addEventListener("astro:after-swap", () => {
    initializeEventListeners();
  });
</script>
